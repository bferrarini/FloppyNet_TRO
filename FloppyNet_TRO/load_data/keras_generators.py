'''
Created on 29 Oct 2019

@author: Bruno Ferrarini
@affiliation Univeristy of Essex, UK

'''

from __future__ import absolute_import, division, print_function, unicode_literals
import tensorflow as tf
#https://docs.python.org/3.7/library/pathlib.html?highlight=pathlib%20path
# import os
# import socket
# import config

# hostname = socket.gethostname().upper()
#
#
# SPED_dir_NEW = config.SPED_900_NEW_base_dir
#
# test_dir = os.path.join(SPED_dir_NEW,"test")
# train_dir = os.path.join(SPED_dir_NEW,"training")
# # the file classes is generated by SPED900.organize as part of the split process


    


#########################
##  KERAS IMAGE LOADER ##
#########################

'''
    This function is based on tf.keras.preprocessing.image.ImageDataGenerator and flow_from_directory.
    The dataset's images need to be organized in a directory for each class under the train_dir.
    To works it requires a directory structure as:
    @parameters
        - train_dir: the directory where the class directories are placed
        - BATCH_SIZE: number of images per batch
        - val_split: share of images used to create the validation generator
        - seed: RNG seed used to random sort the images
        - IMG_HEIGHT: the height of the images to feed into the model (resize occurs)
        - IMG_WIDTH: the width of the images to feed into the model (resize occurs)
        - class_mode: determines the format of the labels (https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/ImageDataGenerator?version=stable)
'''

def train_data_gen(train_dir, BATCH_SIZE, val_dir = None, val_split = 0.1, 
                   seed = None, 
                   IMG_HEIGHT = 224, 
                   IMG_WIDTH = 224,
                   class_mode = 'categorical',
                   featurewise_center=False, 
                   samplewise_center=False, 
                   featurewise_std_normalization=False, 
                   samplewise_std_normalization=False, 
                   zca_whitening=False, 
                   zca_epsilon=1e-06, 
                   rotation_range=0, 
                   width_shift_range=0.0, 
                   height_shift_range=0.0, 
                   brightness_range=None, 
                   shear_range=0.0, 
                   zoom_range=0.0, 
                   channel_shift_range=0.0, 
                   fill_mode='nearest', 
                   cval=0.0, 
                   horizontal_flip=False, 
                   vertical_flip=False, 
                   rescale=1./255., 
                   preprocessing_function=None, 
                   data_format='channels_last', 
                   #interpolation_order=1, 
                   dtype='float32'
                   ):
    
    if val_dir is None:
        val_split_ = val_split
    else:
        val_split_ = 0.0
    
    train_preprocessing = tf.keras.preprocessing.image.ImageDataGenerator(
        rescale=rescale,
        
       featurewise_center=featurewise_center, 
       samplewise_center=samplewise_center, 
       featurewise_std_normalization=featurewise_std_normalization, 
       samplewise_std_normalization=samplewise_std_normalization, 
       zca_whitening=zca_whitening, 
       zca_epsilon=zca_epsilon, 
       rotation_range=rotation_range, 
       width_shift_range=width_shift_range, 
       height_shift_range=height_shift_range, 
       brightness_range=brightness_range, 
       shear_range=shear_range, 
       zoom_range=zoom_range, 
       channel_shift_range=channel_shift_range, 
       fill_mode=fill_mode, 
       cval=cval, 
       horizontal_flip=horizontal_flip, 
       vertical_flip=vertical_flip, 
       preprocessing_function=preprocessing_function, 
       data_format=data_format, 
       validation_split=val_split_, 
       #interpolation_order=interpolation_order, 
       dtype=dtype        
       )
    
    train_data_gen = train_preprocessing.flow_from_directory(
        directory=train_dir,
        batch_size=BATCH_SIZE,
        seed=seed,
        shuffle=True,
        class_mode=class_mode,
        subset="training",
        target_size=(IMG_HEIGHT,IMG_WIDTH),
        )
    
    if val_dir is None:
    
        validation_data_gen = train_preprocessing.flow_from_directory(
            directory=train_dir,
            batch_size=BATCH_SIZE,
            seed=seed,
            shuffle=True,
            class_mode=class_mode,
            subset="validation",
            target_size=(IMG_HEIGHT,IMG_WIDTH),
            )
    else:
        
        validation_data_gen = train_preprocessing.flow_from_directory(
            directory=val_dir,
            batch_size=BATCH_SIZE,
            seed=seed,
            shuffle=True,
            class_mode=class_mode,
            target_size=(IMG_HEIGHT,IMG_WIDTH),
            )        
    
    return train_data_gen, validation_data_gen


'''
    This function is based on tf.keras.preprocessing.image.ImageDataGenerator and flow_from_directory.
    The dataset's images need to be organized in a directory for each class under the train_dir.
    To works it requires a directory structure as:
    @parameters
        - train_dir: the directory where the class directories are placed
        - BATCH_SIZE: number of images per batch
        - seed: RNG seed used to random sort the images
        - IMG_HEIGHT: the height of the images to feed into the model (resize occurs)
        - IMG_WIDTH: the width of the images to feed into the model (resize occurs)
        - class_mode: determines the format of the labels (https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/ImageDataGenerator?version=stable)
'''

def test_data_gen(test_dir, BATCH_SIZE, 
                  seed = None, 
                  IMG_HEIGHT = 224, 
                  IMG_WIDTH = 224,
                  class_mode = 'categorical'
                  ):
    
    test_preprocessing = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255.)
     
    test_data_gen = test_preprocessing.flow_from_directory(
        directory=test_dir,
        batch_size=BATCH_SIZE,
        seed=seed,
        shuffle = False,
        class_mode=class_mode,
        target_size=(IMG_HEIGHT,IMG_WIDTH),
        )  
    
    return test_data_gen

'''
    This function is based on tf.keras.preprocessing.image.ImageDataGenerator and flow_from_directory.
    To works it requires a directory structure as:
        dataset_dir/sub_set.
    For example, if the images are in E:\fast_datasets\CNN-Region-VLAD-VPR-master\berlin_A100\berlin_A100_1
        - dataset_dir = E:\fast_datasets\CNN-Region-VLAD-VPR-master\berlin_A100
        - sub_set = berlin_A100_1
'''

def predict_generator(dataset_dir,
                      sub_set,  
                      BATCH_SIZE = 1,  
                      seed = None, 
                      IMG_HEIGHT = 224, 
                      IMG_WIDTH = 224,
                      class_mode = "categorical",
                      shuffle = False,
                      rescale = True
                   ):
    
    if rescale:
        preprocessing = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255.)
    else:
        preprocessing = tf.keras.preprocessing.image.ImageDataGenerator()
        
    classes = list()
    classes.append(sub_set)
    
    predict_data_gen = preprocessing.flow_from_directory(
        directory=dataset_dir,
        batch_size=BATCH_SIZE,
        seed=seed,
        classes = classes,
        shuffle = shuffle,
        class_mode=class_mode,
        target_size=(IMG_HEIGHT,IMG_WIDTH),
        )  
    
    return predict_data_gen

